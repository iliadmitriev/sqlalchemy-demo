[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
branch = true
parallel = true
concurrency = ["greenlet"]
omit = [
    "venv/*",
    "conftest.py",
    "test_*.py",
]

[tool.coverage.report]
show_missing = true
fail_under = 70

max-line-length = 120
disable = ["E0401", "R0903"]

[tool.poetry]
name = "sqlalchemy-demo"
version = "0.1.0"
description = ""
authors = ["Ilia Dmitriev <ilia.dmitriev@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.5.2"
sqlalchemy = "^2.0.23"
fastapi = "^0.105.0"
asyncpg = "^0.29.0"
uvicorn = "^0.24.0.post1"
uvloop = "^0.19.0"
greenlet = "^3.0.2"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
flake8 = "^6.1.0"
flake8-isort = "^6.1.1"
flake8-black = "^0.3.6"
flake8-pyproject = "^1.2.3"
flake8-bugbear = "^23.12.2"
flake8-comprehensions = "^3.14.0"
flake8-coding = "^1.3.2"
flake8-eradicate = "^1.5.0"
flake8-debugger = "^4.1.2"
flake8-executable = "^2.1.3"
flake8-logging-format = "^0.9.0"
flake8-pie = "^0.16.0"
flake8-pytest-style = "^1.7.2"
flake8-quotes = "^3.3.2"
flake8-simplify = "^0.21.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
pylint = "^3.0.3"
autoflake = "^2.2.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py310"]
skip-string-normalization = true

[tool.isort]
line_length = 120
combine_as_imports = true
order_by_type = true
include_trailing_comma = true
use_parentheses = true
multi_line_output = 3

[tool.pylint.format]
max-line-length = 120

[tool.pylint]
max-line-length = 120
disable = ["E0401", "R0903"]

[tool.flake8]
max-line-length = 120
no-accept-encodings = true
exclude = [
    ".git", ".venv", "venv", ".mypy_cache",
    ".pytest_cache", "__pycache__",
    "alembic",
]
# Ignoring:
# E203: white space before ':'. Because it's not black compatible
# E501: Line too long. Because we use soft line limit B950
# W503: Line break occurred before a binary operator. Because black
# W505: Maximum doc-string length. Because it's not black compatible
# B008: Do not perform function calls in argument defaults. Because FastAPI
# G200: Beacause sometimes its needed
# PIE781: PIE781: assign-and-return. Because it's too noisy
ignore = ["E203","E501","W503","W505","B008","G200","PIE781","PIE786","E800"]
select = ["C","E","F","G","I","P","S","W","Q","T","B","B950"]
per-file-ignores = [
    "__init__.py:F401",
]

[tool.mypy]
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_reexport = false
exclude = ["^alembic/", "^conf/", "^external_integration", "^tests/", "^utils/"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = false                   # to allow parsing
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = [
  "aiokafka.*",
  "aioredis.*",
  "aioretry.*",
  "alembic.*",
  "asyncpg.*",
  "cache.*",
  "gunicorn.*",
  "msgpack",
  "pandas.*",
  "prometheus_client.*",
  "pythonjsonlogger.*",
  "starlette_prometheus.*",
  "uvicorn.*",
  "xxhash.*",
  "aiobotocore.*",
  "aiogram.*",
  "vkbottle.*",
]
ignore_missing_imports = true